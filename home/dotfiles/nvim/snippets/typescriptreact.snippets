snippet boil "react component"
	import React from "react";

	export type $1Props = {
		$2
	}

	export const $1 = ({$3}: $1Props) => {
		return $0;
	};

snippet bstory "react story"
  import type { StoryObj, Meta } from '@storybook/react';
  import { action } from '@storybook/addon-actions';
  import { $1 } from './$1';

  const meta: Meta<typeof $1> = {
    title: '$1',
    component: $1,
    // decorators: [],
    // parameters: { background: { default: 'dark' } },
  };
  export default meta;

  type Story = StoryObj<typeof $1>;

  export const Default: Story = {
    args: {
      // onClick: action("onClick"),
    },
    // name: '$1',
    // render: (args) => <$1 {...args} />,
  };

snippet bcontextreducer "react context + reducer"
	import { createContext, useContext, useMemo, useReducer, Dispatch } from "react";

	type $1State = {
		$2
	};

	const defaultInitialState: $1State = {
		$3
	};

	type $1Action =
		| { type: "action"; payload: string; }
		| { type: "action"; payload: number; };
	
	const ${1/\w+/\l$0/g}Reducer = (state: $1State, action: $1Action): $1State => {
		switch (action.type) {
			case "action":
				return { ...state  };
			default:
				return state;
		}
	};

	const $1Context = createContext<{ state: $1State; dispatch: Dispatch<$1Action>; }>({
		state: defaultInitialState,
		dispatch: () => null,
	});

	export const $1Provider = ({ children, initialState }: { children: React.ReactNode, initialState?: $1State }) => {
		const [state, dispatch] = useReducer(${1/\w+/\l$0/g}Reducer, initialState ?? defaultInitialState);

		const memoizedValue = useMemo(() => ({ state, dispatch }), [state]);

		return (
			<$1Context.Provider value={memoizedValue}>
				{children}
			</$1Context.Provider>
		);
	};

	export const use$1 = () => useContext($1Context);
