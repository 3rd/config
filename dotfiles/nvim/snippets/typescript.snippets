snippet bcontext "context"
	import { createContext, useContext } from "react";

	type $1ContextType = {
		$2
	};

	const $1Context = createContext<$1ContextType>({} as $1ContextType);

	export const $1Provider = $1Context.Provider;

	export const use$1 = () => useContext($1Context);

snippet breducer "reducer"
	import { useReducer } from "react";

	type $1State = {
		$2
	};

	type $1Action =
		| { type: "action"; payload: string; }
		| { type: "action"; payload: number; };
	
	const ${1/\w+/\l$0/g}Reducer = (state: $1State, action: $1Action): $1State => {
		switch (action.type) {
			case "action":
				return { ...state  };
			default:
				return state;
		}
	};

	const defaultInitialState: $1State = {
		$2
	};

	const use$1 = (initialState?: $1State) => useReducer($1Reducer, initialState ?? defaultInitialState);

	export { $1Reducer, use$1 };
